//program to find out the maximum profit that a share trader could have made.
#include<bits/stdc++.h>
using namespace std;
 int maxProfit(vector<int>&price){
            int n=price.size();
            vector<int> profit(n,0);
            int maxprice=price[n-1];
            for(int i=n-2;i>=0;i--){
                maxprice=max(maxprice,price[i]);
                profit[i]=max(profit[i+1],maxprice-price[i]);
            }
            int minprice=price[0];
            for(int i=0;i<n;i++){
                minprice=min(minprice,price[i]);
                profit[i]=max(profit[i-1],profit[i]+(price[i]-minprice));
            }
            return  profit[n-1];
}
int main()
{
    int n;
    cout<<"Enter the size of the vector:\n";
    cin>>n;
    vector<int> price;
    cout<<"Enter the elements in the vector:\n";
    for(int i=0;i<n;i++){
        int value;
        cin>>value;
        price.push_back(value);
    }
    cout<<"Maximum profit="<<maxProfit(price);
}
/*

output:->

Enter the size of the vector:
6
Enter the elements in the vector:
10 22 5 75 65 80
Maximum profit=87

Time complexity=O(n)
*/