//program to find length of a longest common subsequence
#include<bits/stdc++.h>
using namespace std;
int lcsUtil(int n, int m, string &str1, string &str2, vector<vector<int>> &dp){
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (str1[i - 1] == str2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[n][m];
}
int lcs(string str1, string str2){
         int n=str1.size();
         int m=str2.size();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0)); 
        return lcsUtil(n, m, str1, str2, dp);
}


int main()
{
    string str1,str2;
    cout<<"Enter two strings:\n";
    getline(cin,str1);
    getline(cin,str2);
    cout<<"length of a longest common subsequence="<<lcs(str1,str2);
    
}
/*

output:->

Enter two strings:
abcdgh
aedfhr
length of a longest common subsequence=3
Time complexity=O(n*m)
*/