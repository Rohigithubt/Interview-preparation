//program to implement queue using linked list
#include <bits/stdc++.h>
using namespace std;
class Node {
public:
    int data;
    Node* next;
    Node(int data)
    {
        this->data = data;
        this->next = nullptr;
    }
};
class Queue {

    Node *front, *rear;

public:
    Queue() { front = rear = nullptr; }

    bool isEmpty()
    {
        if (front == nullptr) {
            return true;
        }
        return false;
    }

    void enqueue(int data) {

      Node* new_node = new Node(data);

        if (this->isEmpty()) {
            front = rear = new_node;
            return;
        }

        rear->next = new_node;
        rear = new_node;
    }

      void dequeue() {

       if (this->isEmpty()) {
            cout << "Queue Underflow\n";
            return;
        }

      
        Node* temp = front;
        front = front->next;

          if (front == nullptr)
            rear = nullptr;

            delete temp;
    }

    int getFront() {
      
        if (this->isEmpty()) {
            cout << "Queue is empty\n";
            return INT_MIN;
        }
        return front->data;
    }

    int getRear() {

    if (this->isEmpty()) {
            cout << "Queue is empty\n";
            return INT_MIN;
        }
      
        return rear->data;
    }
};
int main()
{
    Queue q;

    q.enqueue(10);
    q.enqueue(20);

    cout << "Queue Front: " << q.getFront() << endl;
    cout << "Queue Rear: " << q.getRear() << endl;

    q.dequeue();
    q.dequeue();
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);

    q.dequeue();

    cout << "Queue Front: " << q.getFront() << endl;
    cout << "Queue Rear: " << q.getRear() << endl << endl;

    return 0;
}
/*

output:->

Queue Front: 10
Queue Rear: 20
Queue Front: 40
Queue Rear: 50

Time complexity=O(1)
*/
