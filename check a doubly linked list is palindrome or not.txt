//program to check given doubly linked list is palindrome or not
#include<bits/stdc++.h>
using namespace std;
class ListNode{
    public:
  int data;
  ListNode* next,*prev;
  ListNode(int data){
      this->prev=NULL;
      this->data=data;
      this->next=NULL;
  }
};
ListNode* createList(int arr[],int n){
   if (n == 0) return NULL;

    ListNode* head = new ListNode(arr[0]);
    ListNode* curr = head;

    for (int i = 1; i < n; i++) {
        ListNode* newnode = new ListNode(arr[i]);
        curr->next = newnode;
        newnode->prev = curr;
        curr = newnode;
    }
    return head; 
}
bool ispalindrome(ListNode* left){
     if (left == NULL) return true;

    ListNode* right = left;
    while (right->next != NULL){
        right = right->next;
    }

    while (left != right && left->prev != right) {
        if (left->data != right->data)
            return false;

        left = left->next;
        right = right->prev;
    }

    return true;
}
int main()
{
    int n;
    cout<<"Enter the size of the list:\n";
    cin>>n;
    int arr[n];
    cout<<"Enter the elements in the list:\n";
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    ListNode* head=createList(arr,n);
    if(ispalindrome(head)){
        cout<<"This linked list is palindrome:\n";
    }
    else{
        cout<<"This linked list is not palindrome:\n";
    }
}
/*

output:->

Enter the size of the list:
9
Enter the elements in the list:
1 2 3 4 5 4 3 2 1
This linked list is palindrome:

Time complexity=O(n)
*/
