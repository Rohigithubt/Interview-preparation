//program to reverse a linked list
#include<bits/stdc++.h>
using namespace std;
class ListNode{
  public:
   int data;
   ListNode* next;
   ListNode(int data){
       this->data=data;
       this->next=NULL;
   }
};
ListNode* createList(int arr[],int n){
    if(n==0) return NULL;
    ListNode* head=new ListNode(arr[0]);
    ListNode *curr=head;
    for(int i=1;i<n;i++){
        curr->next=new ListNode(arr[i]);
        curr=curr->next;
    }
    return head;
}
ListNode* reverseList(ListNode* head) {
    ListNode *curr = head, *prev = nullptr, *next;
    while (curr != nullptr) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}
void printList(ListNode* head){
    ListNode* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n;
    cout<<"Enter the size of the Linked List:\n";
    cin>>n;
     if (n == 0) {
        cout << "The linked list is empty." << endl;
        return 0;
    }
    int arr[n];
    cout<<"Enter elements in the Linked List:\n";
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    ListNode* head = createList(arr,n);
    ListNode* result=reverseList(head);
    cout<<"List after reverse:\n";
    printList(result);
}
/*

output:->

Enter the size of the Linked List:
7
Enter elements in the Linked List:
1 2 3 4 5 6 7
List after reverse:
7 6 5 4 3 2 1 

Time complexity=O(n)
*/