//program to find minimum swaps required to sort the array
#include<bits/stdc++.h>
using namespace std;
int minSwaps(vector<int>&nums){
	     vector<pair<int,int>> v;
	     for(int i=0;i<nums.size();i++){
	         v.push_back({nums[i],i});
	     }
	     sort(v.begin(),v.end());
	     int swaps=0;
	     for(int i=0;i<nums.size();i++){
	         pair<int,int> p=v[i];
	         int value=p.first;
	         int index=p.second;
	         if(i!=index){
	             swaps++;
	             swap(v[i],v[index]);
	             i--;
	         }
	     }
	     return swaps;
}
int main()
{
    int n;
    cout<<"Enter the size of the array:\n";
    cin>>n;
    vector<int> nums;
    cout<<"Enter the elements in array:\n";
    for(int i=0;i<n;i++){
        int x;
        cin>>x;
        nums.push_back(x);
    }
    cout<<"minimum swaps required to sort the array="<<minSwaps(nums);
    
}
/*

output:->
Enter the size of the array:
4
Enter the elements in array:
2 8 5 4
minimum swaps required to sort the array=1

Time complexity=O(n)

*/